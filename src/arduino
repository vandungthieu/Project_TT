#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>
#include <ArduinoJson.h>

#define DHTPIN 14        // D5 trên NodeMCU
#define DHTTYPE DHT11    // DHT11 hoặc DHT22

// Định nghĩa chân cho 3 đèn LED
#define LED1_PIN 5  // D1
#define LED2_PIN 4  // D2
#define LED3_PIN 0  // D3

// Cấu hình WiFi
const char* ssid = "Happy502";
const char* password = "66668888";

// Cấu hình MQTT
const char* mqtt_server = "f275e90fe8454aed8c3d90e35c44fc09.s1.eu.hivemq.cloud";
const int mqtt_port = 8883;
const char* mqtt_user = "dungthieu123";
const char* mqtt_password = "Dung.tv215547";

const char* sensor_topic = "sensor/data";     // Topic gửi dữ liệu cảm biến
const char* control_topic = "websocket/data"; // Topic nhận lệnh điều khiển

WiFiClientSecure espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Đang kết nối WiFi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" Đã kết nối WiFi");
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Nhận dữ liệu từ topic: ");
  Serial.println(topic);

  // Chuyển payload thành chuỗi
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.print("Payload: ");
  Serial.println(message);

  // Parse JSON
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, message);
  if (error) {
    Serial.print("Lỗi parse JSON: ");
    Serial.println(error.c_str());
    return;
  }

  // Kiểm tra topic
  if (String(topic) == control_topic) {
    // Lấy trường "data" (JSON lồng nhau)
    const char* data_str = doc["data"];
    if (!data_str) {
      Serial.println("Không tìm thấy trường 'data' trong payload");
      return;
    }

    // Parse JSON lồng nhau
    DynamicJsonDocument data_doc(512);
    error = deserializeJson(data_doc, data_str);
    if (error) {
      Serial.print("Lỗi parse JSON lồng nhau: ");
      Serial.println(error.c_str());
      return;
    }

    // Lấy trạng thái đèn
    const char* led1State = data_doc["led1State"];
    if (led1State) {
      if (String(led1State) == "On") {
        digitalWrite(LED1_PIN, HIGH);
        Serial.println("LED1: Bật");
      } else if (String(led1State) == "Off") {
        digitalWrite(LED1_PIN, LOW);
        Serial.println("LED1: Tắt");
      }
    }

    // Có thể mở rộng cho LED2, LED3
    // Ví dụ: const char* led2State = data_doc["led2State"];
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Đang kết nối MQTT...");
    String clientId = "ESP8266Client-" + String(random(0xffff), HEX);
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_password)) {
      Serial.println(" Kết nối thành công");
      // Subscribe vào topic điều khiển
      client.subscribe(control_topic);
    } else {
      Serial.print(" Lỗi, rc=");
      Serial.print(client.state());
      Serial.println(" Thử lại sau 5 giây");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  dht.begin();

  // Cấu hình chân LED
  pinMode(LED1_PIN, OUTPUT);
  pinMode(LED2_PIN, OUTPUT);
  pinMode(LED3_PIN, OUTPUT);
  digitalWrite(LED1_PIN, LOW); // Tắt LED ban đầu
  digitalWrite(LED2_PIN, LOW);
  digitalWrite(LED3_PIN, LOW);

  setup_wifi();

  // Kết nối tới MQTT broker
  espClient.setInsecure(); // Bỏ qua chứng chỉ SSL
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Đọc dữ liệu từ DHT11/DHT22
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Lỗi đọc dữ liệu từ DHT sensor!");
  } else {
    // Tạo dữ liệu JSON
    String payload = "{";
    payload += "\"temperature\":" + String(temperature, 2) + ",";
    payload += "\"humidity\":" + String(humidity, 2);
    payload += "}";

    Serial.print("Đang gửi dữ liệu: ");
    Serial.println(payload);

    // Gửi dữ liệu lên MQTT
    if (client.publish(sensor_topic, payload.c_str())) {
      Serial.println("Dữ liệu đã gửi thành công");
    } else {
      Serial.println("Gửi dữ liệu thất bại");
    }
  }

  delay(5000); // Gửi dữ liệu mỗi 5 giây
}